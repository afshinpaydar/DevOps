kind: "BuildConfig"
apiVersion: "v1"
metadata:
  name: "marketwatch-pipeline"
spec:
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
def templatePath = 'http://gogs-persistent.apps.snt.local/cicd/templates/raw/master/marketwatch-template.json'
def templateName = 'marketwatch'
pipeline {
    agent any
    options {
        // set a timeout of 20 minutes for this pipeline
        timeout(time: 20, unit: 'MINUTES')
    }
    stages {
        stage('preamble') {
            steps {   
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            echo "Using project: ${openshift.project()}"
                            deleteDir()
                        }
                    }
                }
            }
        }
        stage('checkout'){
            steps {
                checkout([$class: 'TeamFoundationServerScm', credentialsConfigurer: [$class: 'AutomaticCredentialsConfigurer'], projectPath: '$/Broker Solutions', serverUrl: 'http://192.168.168.10:1397/tfs/SoshyantRepoTeam', useOverwrite: true, useUpdate: true, workspaceName: '${JOB_NAME}-${NODE_NAME}-F'])
                sh '''
		        cat << EOF > ./100Tahlil/NuGet.Config
<configuration>
    <packageSources>
	<add key="repo" value="http://192.168.168.34/repository/nuget-group/" />
    </packageSources>
</configuration>
EOF
		        '''
		        
		        sh "git init"
		        sh "git add ."
                sh 'git commit -m "build# $BUILD_NUMBER"'
                sh "git  push  http://cicd:S0shyant123@gogs-persistent.apps.snt.local/cicd/marketwatch.git master -f ; exit 0"
            }
        }
        stage('cleanup') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            // delete everything with this template label
                            openshift.selector("all", [ template : templateName ]).delete()
                            // delete any secrets with this template label
                            if (openshift.selector("secrets", templateName).exists()) {
                                openshift.selector("secrets", templateName).delete()
                            }
                            if (openshift.selector("imagestream").exists()) {
                                openshift.selector("imagestream").delete()
                            }
                            if (openshift.selector("svc","marketwatch").exists()) {
                                openshift.selector("svc","marketwatch").delete()
                            }
                            if (openshift.selector("bc","marketwatch").exists()) {
                                openshift.selector("bc","marketwatch").delete()
                            }
                            if (openshift.selector("dc","marketwatch").exists()) {
                                openshift.selector("dc","marketwatch").delete()
                            }
                            if (openshift.selector("routes","marketwatch").exists()) {
                                openshift.selector("routes","marketwatch").delete()
                            }
                           
                        }
                    }
                } // script
            } // steps
        } // stage
        stage('create') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            // create a new application from the templatePath
                            openshift.newApp(templatePath)
                        }
                    }
                } // script
            } // steps
        } // stage
        stage('build') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            def builds = openshift.selector("bc", templateName).related('builds')
                            builds.untilEach(1) {
                                return (it.object().status.phase == "Complete")
                            }
                        }
                    }
                } // script
            } // steps
        } // stage
        stage('deploy') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            def rm = openshift.selector("dc", templateName).rollout()
                            openshift.selector("dc", templateName).related('pods').untilEach(1) {
                                return (it.object().status.phase == "Running")
                            }
                        }
                    }
                } // script
            } // steps
        } // stage
        stage('tag') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            // if everything else succeeded, tag the ${templateName}:latest image as ${templateName}-staging:latest
                            // a pipeline build config for the staging environment can watch for the ${templateName}-staging:latest
                            // image to change and then deploy it to the staging environment
                            openshift.tag("${templateName}:latest", "${templateName}-staging:latest")
                        }
                    }
                } // script
            } // steps
        } // stage
    } // stages
} // pipeline